@page "/"
@using System.Text.Json
@rendermode InteractiveServer

<h1>Pomodoro Timer</h1>

<div class="timer">
    <span>@DisplayMinutes</span>:<span>@DisplaySeconds</span>
</div>

<div class="session-info">
    <span>@SessionType</span>
</div>

<div class="controls">
    <div>
        <label>Travail (minutes):</label>
        <input type="number" min="1" max="60" @bind="WorkDuration" @oninput="UpdateDisplay" />
    </div>
    <div>
        <label>Pause (minutes):</label>
        <input type="number" min="1" max="60" @bind="BreakDuration" />
    </div>
    <button @onclick="StartTimer" disabled="@IsTimerRunning">Start</button>
    <button @onclick="ResetTimer">Reset</button>
</div>

<div>
    <label>Nombre de sessions de travail:</label>
    <span>@SessionCount</span>
</div>

@code {
    private int WorkDuration = 25;
    private int BreakDuration = 5;
    private int Minutes;
    private int Seconds;
    private bool IsTimerRunning = false;
    private bool IsWorkSession = true; // True for work session, false for break session
    private System.Timers.Timer Timer;
    private int SessionCount = 0;

    private string DisplayMinutes => Minutes.ToString("D2");
    private string DisplaySeconds => Seconds.ToString("D2");
    private string SessionType => IsWorkSession ? "Session de travail" : "Pause";

    protected override void OnInitialized()
    {
        ResetTimer();
    }

    private void TimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        if (Seconds == 0)
        {
            if (Minutes == 0)
            {
                Timer.Stop();
                IsTimerRunning = false;
                if (IsWorkSession)
                {
                    IsWorkSession = false;
                    SessionCount++;
                    Minutes = BreakDuration;
                }
                else
                {
                    IsWorkSession = true;
                    Minutes = WorkDuration;
                }
                Seconds = 0;
            }
            else
            {
                Minutes--;
                Seconds = 59;
            }
        }
        else
        {
            Seconds--;
        }
        InvokeAsync(StateHasChanged); // Notify Blazor to refresh UI
    }

    private async Task StartTimer()
    {
        IsTimerRunning = true;
        Timer.Start();
        await InvokeAsync(StateHasChanged); // Notify Blazor to refresh UI
    }

    private async Task ResetTimer()
    {
        Timer?.Stop();
        IsTimerRunning = false;
        IsWorkSession = true;
        Minutes = WorkDuration;
        Seconds = 0;
        Timer = new System.Timers.Timer(1000);
        Timer.Elapsed += TimerElapsed;
        await InvokeAsync(StateHasChanged); // Notify Blazor to refresh UI
    }

    private void UpdateDisplay(ChangeEventArgs e)
    {
        Minutes = Convert.ToInt32(e.Value);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Écrire les données dans un fichier lorsque l'application est rendue pour la première fois
            await WriteToFile();
        }
    }

    private async Task WriteToFile()
    {
        try
        {
            string filePath = "pomodoro_data.json";

            // Créer un objet pour les données à sauvegarder
            var pomodoroData = new PomodoroData
                {
                    SessionCount = SessionCount,
                    WorkDuration = WorkDuration,
                    BreakDuration = BreakDuration
                };

            // Sérialiser l'objet en JSON
            string jsonData = JsonSerializer.Serialize(pomodoroData);

            // Écrire le JSON dans le fichier
            await File.WriteAllTextAsync(filePath, jsonData);
        }
        catch (Exception ex)
        {
            // Gérer les erreurs
            Console.WriteLine($"Erreur lors de l'écriture dans le fichier : {ex.Message}");
        }
    }

    public class PomodoroData
    {
        public int SessionCount { get; set; }
        public int WorkDuration { get; set; }
        public int BreakDuration { get; set; }
    }
}

<style>
    .timer {
        font-size: 36px;
        margin: 20px 0;
    }

    .session-info {
        font-size: 18px;
        margin-bottom: 10px;
    }

    .controls {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .controls div {
            margin-bottom: 10px;
        }

        .controls label {
            font-weight: bold;
        }

        .controls input[type="number"] {
            width: 50px;
            padding: 5px;
            font-size: 16px;
        }

        .controls button {
            font-size: 18px;
            padding: 10px 20px;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            margin-right: 10px;
        }

            .controls button:disabled {
                background-color: grey;
                cursor: not-allowed;
            }
</style>
